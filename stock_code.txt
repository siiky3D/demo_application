// import 'package:auto_route/auto_route.dart';
// import 'package:netflix_clone/src/core/config/constants/path_constants.dart';

// import 'package:netflix_clone/src/core/config/routes/app_router.gr.dart';
// import 'package:flutter/material.dart';

// @AutoRouterConfig(replaceInRouteName: 'Screen|Widget,Route')
// final class AppRouter extends $AppRouter {
//   AppRouter();

//   @override
//   List<AutoRoute> get routes => [
//         AdaptiveRoute(
//           page: SplashRoute.page,
//           path: PathConstants.splash,
//           initial: true,
//         ),
//         AdaptiveRoute(
//           page: LoginRoute.page,
//           path: PathConstants.login,
//         ),
//         AdaptiveRoute(
//           page: ProfileSelectionRoute.page,
//           path: PathConstants.profileSelection,
//         ),
//         AdaptiveRoute(
//           page: MainRoute.page,
//           path: PathConstants.main,
//           children: [
//             RedirectRoute(
//               path: '',
//               redirectTo: PathConstants.home,
//             ),
//             AdaptiveRoute(
//               page: HomeRoute.page,
//               path: PathConstants.home,
//               initial: true,
//             ),
//             AdaptiveRoute(
//               page: GamesRoute.page,
//               path: PathConstants.games,
//             ),
//             AdaptiveRoute(
//               page: NewAndHotRoute.page,
//               path: PathConstants.newAndHot,
//             ),
//             AdaptiveRoute(
//               page: ProfileManagementRoute.page,
//               path: PathConstants.profileManagement,
//             ),
//           ],
//         ),
//         CustomRoute(
//           page: MovieDetailRoute.page,
//           path: PathConstants.movieDetail,
//           durationInMilliseconds: 800,
//           reverseDurationInMilliseconds: 800,
//           transitionsBuilder: (context, animation, secondaryAnimation, child) {
//             return FadeTransition(
//               opacity: animation,
//               child: child,
//             );
//           },
//         ),
//       ];
// }


// BlocBuilder<GetPopularMoviesBloc, GetPopularMoviesState>(
          //   builder: (context, getPopularMoviesState) {
          //     if (getPopularMoviesState is GetPopularMoviesError) {
          //       return Padding(
          //         padding: const EdgeInsets.all(12).r,
          //         child: RetryButton(
          //           text: getPopularMoviesState.message,
          //           retryAction: () => context
          //               .read<GetPopularMoviesBloc>()
          //               .add(const FetchPopularMovies()),
          //         ),
          //       );
          //     }

          //     if (getPopularMoviesState is GetPopularMoviesLoaded) {
          //       return _MovieListingWidget(
          //         hasReachedMax:
          //             context.watch<GetPopularMoviesBloc>().hasReachedMax,
          //         movies: getPopularMoviesState.movies,
          //         whenScrollBottom: () async => context
          //             .read<GetPopularMoviesBloc>()
          //             .add(const FetchPopularMovies()),
          //       );
          //     }

          //     return const BaseIndicator();
          //   },
          // ),
          // BlocBuilder<GetTopRatedMoviesBloc, GetTopRatedMoviesState>(
          //   builder: (context, getTopRatedMoviesState) {
          //     if (getTopRatedMoviesState is GetTopRatedMoviesError) {
          //       return Padding(
          //         padding: const EdgeInsets.all(12).r,
          //         child: RetryButton(
          //           text: getTopRatedMoviesState.message,
          //           retryAction: () => context
          //               .read<GetTopRatedMoviesBloc>()
          //               .add(const FetchTopRatedMovies()),
          //         ),
          //       );
          //     }

          //     if (getTopRatedMoviesState is GetTopRatedMoviesLoaded) {
          //       return _MovieListingWidget(
          //         hasReachedMax:
          //             context.watch<GetTopRatedMoviesBloc>().hasReachedMax,
          //         movies: getTopRatedMoviesState.movies,
          //         whenScrollBottom: () async =>
          //             context.read<GetTopRatedMoviesBloc>()
          //               ..add(const FetchTopRatedMovies()),
          //       );
          //     }

          //     return const BaseIndicator();
          //   },
          // ),

          Future<Either<NetworkException, MovieListingsEntity>>
    _getMoviesFromMockData() async {
  final response =
      await rootBundle.loadString('assets/mock/movie_listings_dummy_data.json');
  final data = json.decode(response) as Map<String, dynamic>;
  final movieListingsModel = MovieListingsModel.fromJson(data);
  return Right(movieListingsModel.toEntity());
}