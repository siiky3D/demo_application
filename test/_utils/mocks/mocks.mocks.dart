// Mocks generated by Mockito 5.4.5 from annotations
// in netflix_clone/test/_utils/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:netflix_clone/src/core/network/api_client.dart' as _i2;
import 'package:netflix_clone/src/core/network/dio_client.dart' as _i5;
import 'package:netflix_clone/src/features/movies/data/data_sources/remote/movie_remote_data_source.dart'
    as _i6;
import 'package:netflix_clone/src/features/movies/data/models/movie_detail/movie_detail_model.dart'
    as _i4;
import 'package:netflix_clone/src/features/movies/data/models/movies_listings/movie_listings_model.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiClient_0 extends _i1.SmartFake implements _i2.ApiClient {
  _FakeApiClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieListingsModel_1 extends _i1.SmartFake
    implements _i3.MovieListingsModel {
  _FakeMovieListingsModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailModel_2 extends _i1.SmartFake
    implements _i4.MovieDetailModel {
  _FakeMovieDetailModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClient extends _i1.Mock implements _i5.DioClient {
  MockDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiClient get apiClient => (super.noSuchMethod(
        Invocation.getter(#apiClient),
        returnValue: _FakeApiClient_0(
          this,
          Invocation.getter(#apiClient),
        ),
      ) as _i2.ApiClient);

  @override
  set apiClient(_i2.ApiClient? _apiClient) => super.noSuchMethod(
        Invocation.setter(
          #apiClient,
          _apiClient,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i6.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.MovieListingsModel> getPopularMovies({required int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
          {#page: page},
        ),
        returnValue:
            _i7.Future<_i3.MovieListingsModel>.value(_FakeMovieListingsModel_1(
          this,
          Invocation.method(
            #getPopularMovies,
            [],
            {#page: page},
          ),
        )),
      ) as _i7.Future<_i3.MovieListingsModel>);

  @override
  _i7.Future<_i3.MovieListingsModel> getTopRatedMovies({required int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [],
          {#page: page},
        ),
        returnValue:
            _i7.Future<_i3.MovieListingsModel>.value(_FakeMovieListingsModel_1(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [],
            {#page: page},
          ),
        )),
      ) as _i7.Future<_i3.MovieListingsModel>);

  @override
  _i7.Future<_i4.MovieDetailModel> getMovieDetails({required int? movieId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [],
          {#movieId: movieId},
        ),
        returnValue:
            _i7.Future<_i4.MovieDetailModel>.value(_FakeMovieDetailModel_2(
          this,
          Invocation.method(
            #getMovieDetails,
            [],
            {#movieId: movieId},
          ),
        )),
      ) as _i7.Future<_i4.MovieDetailModel>);

  @override
  _i7.Future<_i3.MovieListingsModel> getRecommendedMovies({
    required int? movieId,
    required int? page,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendedMovies,
          [],
          {
            #movieId: movieId,
            #page: page,
          },
        ),
        returnValue:
            _i7.Future<_i3.MovieListingsModel>.value(_FakeMovieListingsModel_1(
          this,
          Invocation.method(
            #getRecommendedMovies,
            [],
            {
              #movieId: movieId,
              #page: page,
            },
          ),
        )),
      ) as _i7.Future<_i3.MovieListingsModel>);

  @override
  _i7.Future<_i3.MovieListingsModel> getUpcomingMovies({required int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpcomingMovies,
          [],
          {#page: page},
        ),
        returnValue:
            _i7.Future<_i3.MovieListingsModel>.value(_FakeMovieListingsModel_1(
          this,
          Invocation.method(
            #getUpcomingMovies,
            [],
            {#page: page},
          ),
        )),
      ) as _i7.Future<_i3.MovieListingsModel>);

  @override
  _i7.Future<_i3.MovieListingsModel> getNowPlayingMovies(
          {required int? page}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovies,
          [],
          {#page: page},
        ),
        returnValue:
            _i7.Future<_i3.MovieListingsModel>.value(_FakeMovieListingsModel_1(
          this,
          Invocation.method(
            #getNowPlayingMovies,
            [],
            {#page: page},
          ),
        )),
      ) as _i7.Future<_i3.MovieListingsModel>);

  @override
  _i7.Future<_i3.MovieListingsModel> searchMovies({
    required String? query,
    required int? page,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [],
          {
            #query: query,
            #page: page,
          },
        ),
        returnValue:
            _i7.Future<_i3.MovieListingsModel>.value(_FakeMovieListingsModel_1(
          this,
          Invocation.method(
            #searchMovies,
            [],
            {
              #query: query,
              #page: page,
            },
          ),
        )),
      ) as _i7.Future<_i3.MovieListingsModel>);
}
